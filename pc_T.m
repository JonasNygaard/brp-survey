function [fhat,lambda,ehat] = pc_T(x,f_max,method)%% pc_T.m%-----------------------------------------------------------------------------------------------------------------------%%   This function estimates "r" latent common factors based on a standardized panel of variables using the method of %   principal components. It is assumed that the panel can be described by a factor model of the form %%           X = F*Lambda' + e%%   This function relies on the identifying normalization that F'F/T = I and Lambda being diagonal. Here I denotes the %   identity matrix and Lambda is a vector of loadings. F is the matrix of latent common factor. %%   Input variables:%   ---------------------------------------------------------%   x               = Matrix of variables%   f_max           = Maximum number of factors to estimate%   method          = String indicator: IC for information criterion or Full to specify number of factors%%   Output variables:%   ---------------------------------------------------------%   fhat            = Matrix of estimated latent common factors%   lambda          = Matrix of estimated factor loadings%   ehat            = Residual errors not explaining by the common factors      %%   --------------------------------%   Last modified: December, 2015%   --------------------------------%%-----------------------------------------------------------------------------------------------------------------------% Error checking on input parametersif (nargin < 3)  error('pc_T.m: Not enough input arguments');endif (nargin > 3)  error('pc_T.m: Too many input arguments');endif ~ismember(method,[{'IC'},{'Full'}])    error('pc_T.m: Wrong specification for determining number of factors');end%-----------------------------------------------------------------------------------------------------------------------%% ESTIMATING LATENT COMMON FACTORS%-----------------------------------------------------------------------------------------------------------------------% Setting up preliminariesIC2         = zeros(f_max,1);x           = standard(x);[BigT,BigN] = size(x);% Singular value decomposition of xx matrixxx          = x*x';[Fhat0,~,~] = svd(xx); %-----------------------------------------------------------------------------------------------------------------------%% DETERMINING THE NUMBER OF FACTORS TO EXTRACT%-----------------------------------------------------------------------------------------------------------------------% Determining the number of factorsif strcmp(method,'IC')        for k=1:f_max             % Estimating factors and errors        fhat        = Fhat0(:,1:k) * sqrt(BigT);        lambda      = x'*fhat/BigT;        ehat        = x-fhat*lambda';        % Bai and Ng (2002) panel information criteria for factor selection        NT          = BigT * BigN;        NT1         = BigT + BigN;        GCT         = min([BigN;BigT]);        % Computing the criterio        CT2         = log(GCT)*k*(NT1/NT);        % Compute value of information criterion        Sigma       = mean(sum(ehat.*ehat/BigT));        IC2(k,1)    = log(Sigma) + CT2;    end    % Determining the number of factors to keep    [~,IC2_min_index]   = min(IC2(:,1));    fhat                = Fhat0(:,1:IC2_min_index) * sqrt(BigT);    lambda              = x'*fhat/BigT;    ehat                = x-fhat*lambda';   elseif strcmp(method,'Full')    % Estimating the full set of factors    fhat    = Fhat0(:,1:f_max) * sqrt(BigT);    lambda  = x'*fhat/BigT;    ehat    = x-fhat*lambda';   endend       %-----------------------------------------------------------------------------------------------------------------------% END OF FUNCTION%-----------------------------------------------------------------------------------------------------------------------